"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-cloudinary";
exports.ids = ["vendor-chunks/next-cloudinary"];
exports.modules = {

/***/ "(rsc)/./node_modules/next-cloudinary/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/next-cloudinary/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CldImage: () => (/* binding */ le),\n/* harmony export */   CldOgImage: () => (/* binding */ se),\n/* harmony export */   CldUploadButton: () => (/* binding */ ge),\n/* harmony export */   CldUploadWidget: () => (/* binding */ B),\n/* harmony export */   CldVideoPlayer: () => (/* binding */ ue),\n/* harmony export */   cloudinaryLoader: () => (/* binding */ Q),\n/* harmony export */   getCldImageUrl: () => (/* binding */ h),\n/* harmony export */   getCldOgImageUrl: () => (/* binding */ je),\n/* harmony export */   getCldVideoUrl: () => (/* binding */ re)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(rsc)/./node_modules/next/image.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cloudinary-util/util */ \"(rsc)/./node_modules/@cloudinary-util/util/dist/index.mjs\");\n/* harmony import */ var _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cloudinary-util/url-loader */ \"(rsc)/./node_modules/@cloudinary-util/url-loader/dist/index.mjs\");\n/* harmony import */ var next_package_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/package.json */ \"(rsc)/./node_modules/next/package.json\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/head */ \"(rsc)/./node_modules/next/dist/client/components/noop-head.js\");\n/* harmony import */ var next_script__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/script */ \"(rsc)/./node_modules/next/script.js\");\n\n\n\n\nasync function R(t) {\n    let { src: o } = t;\n    try {\n        await new Promise((s, d)=>{\n            fetch(o).then((e)=>{\n                if (!e.ok) {\n                    d(e);\n                    return;\n                }\n                s(e);\n            });\n        });\n    } catch (s) {\n        return s.status === 423 ? await R(t) : !1;\n    }\n    return !0;\n}\n\n\nvar ae = {\n    name: \"next-cloudinary\",\n    version: \"5.7.0\",\n    license: \"MIT\",\n    main: \"./dist/index.js\",\n    module: \"./dist/index.mjs\",\n    types: \"./dist/index.d.ts\",\n    source: \"src/index.ts\",\n    scripts: {\n        build: \"tsup src/index.ts --dts\",\n        dev: \"tsup src/index.ts --watch --dts\",\n        prepublishOnly: \"cp ../README.md . && cp ../LICENSE . && yarn build\",\n        postpublish: \"rm ./README.md && rm ./LICENSE\",\n        test: \"jest\",\n        \"test:app\": 'NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\"test\" yarn build && cd tests/nextjs-app && yarn build'\n    },\n    dependencies: {\n        \"@cloudinary-util/url-loader\": \"^3.15.0\",\n        \"@cloudinary-util/util\": \"^2.3.0\"\n    },\n    devDependencies: {\n        \"@babel/core\": \"^7.23.2\",\n        \"@babel/preset-env\": \"^7.23.2\",\n        \"@types/jest\": \"^29.5.6\",\n        \"@types/react\": \"^18.2.33\",\n        \"@types/react-dom\": \"^18.2.14\",\n        \"babel-jest\": \"^29.7.0\",\n        dotenv: \"^16.3.1\",\n        jest: \"^29.7.0\",\n        \"jest-environment-jsdom\": \"^29.7.0\",\n        mkdirp: \"^3.0.1\",\n        \"ts-jest\": \"^29.1.1\",\n        tsup: \"^7.2.0\",\n        typescript: \"^5.2.2\"\n    },\n    peerDependencies: {\n        next: \"^12 || ^13 || ^14\",\n        react: \"^17 || ^18\"\n    }\n};\nvar H = \"V\", $ = ae.version, X = next_package_json__WEBPACK_IMPORTED_MODULE_2__.version;\nfunction h(t, o, s) {\n    var e, i;\n    let d = (i = (e = o == null ? void 0 : o.cloud) == null ? void 0 : e.cloudName) != null ? i : process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n    return (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: t,\n        config: Object.assign({\n            cloud: {\n                cloudName: d\n            }\n        }, o),\n        analytics: Object.assign({\n            sdkCode: H,\n            sdkSemver: $,\n            techVersion: X,\n            feature: \"\"\n        }, s)\n    });\n}\nfunction Q({ loaderOptions: t, imageProps: o, cldOptions: s, cldConfig: d = {} }) {\n    let e = {\n        ...o,\n        ...s\n    };\n    if (e.width = typeof e.width == \"string\" ? parseInt(e.width) : e.width, e.height = typeof e.height == \"string\" ? parseInt(e.height) : e.height, typeof (t == null ? void 0 : t.width) == \"number\" && typeof e.width == \"number\" && t.width !== e.width) {\n        let i = t.width / e.width;\n        e.widthResize = t.width, typeof e.height == \"number\" && (e.heightResize = Math.round(e.height * i));\n    } else typeof (t == null ? void 0 : t.width) == \"number\" && typeof (e == null ? void 0 : e.width) != \"number\" && (e.width = t.width, e.widthResize = t.width);\n    return h(e, d);\n}\nvar xe = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(o, s) {\n    let d = !1, e = [\n        \"deliveryType\",\n        \"preserveTransformations\",\n        \"strictTransformations\"\n    ];\n    _cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.transformationPlugins.forEach(({ props: r = [] })=>{\n        r.forEach((m)=>{\n            if (e.includes(m)) throw new Error(`Option ${m} already exists!`);\n            e.push(m);\n        });\n    });\n    let i = {\n        alt: o.alt,\n        src: o.src\n    };\n    Object.keys(o).filter((r)=>!e.includes(r)).forEach((r)=>i[r] = o[r]);\n    let c = Object.keys(i).map((r)=>`${r}:${i[r]}`).join(\";\"), [y, p] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(c), g = {};\n    if (e.forEach((r)=>{\n        o[r] && (g[r] = o[r] || void 0);\n    }), o.preserveTransformations) try {\n        let r = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.getTransformations)(o.src).map((m)=>m.join(\",\"));\n        g.rawTransformations = [\n            ...r.flat(),\n            ...o.rawTransformations || []\n        ];\n    } catch (r) {\n        console.warn(`Failed to preserve transformations: ${r.message}`);\n    }\n    let n = {\"deviceSizes\":[320,420,768,1024,1200],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":true,\"domains\":[],\"remotePatterns\":[],\"output\":\"export\"} || {};\n    (o.unoptimized === !0 || (n == null ? void 0 : n.unoptimized) === !0) && (i.src = h({\n        ...g,\n        width: i.width,\n        height: i.height,\n        src: i.src,\n        format: \"default\",\n        quality: \"default\"\n    }, o.config));\n    async function _(r) {\n        let m = !0;\n        if (d) return;\n        if (d = !0, typeof o.onError == \"function\") {\n            let U = o.onError(r);\n            typeof U == \"boolean\" && U === !1 && (m = !1);\n        } else typeof o.onError == \"boolean\" && o.onError === !1 && (m = !1);\n        if (m === !1) return;\n        let b = r.target;\n        await R({\n            src: b.src\n        }) && p(`${c};${Date.now()}`);\n    }\n    let E = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(_, [\n        R,\n        c\n    ]), P = next_image__WEBPACK_IMPORTED_MODULE_1__;\n    return \"default\" in P && (P = P.default), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(P, {\n        key: y,\n        ...i,\n        loader: (r)=>Q({\n                loaderOptions: r,\n                imageProps: i,\n                cldOptions: g,\n                cldConfig: o.config\n            }),\n        onError: E,\n        ref: s\n    });\n}), le = xe;\n\n\nvar be = \"summary_large_image\", Le = ({ excludeTags: t = [], twitterTitle: o, keys: s = {}, ...d })=>{\n    let { alt: e } = d, i = {\n        ...d,\n        crop: d.crop || \"fill\",\n        gravity: d.gravity || \"center\",\n        height: d.height || 1254,\n        src: d.src,\n        width: d.width || 2400,\n        widthResize: d.width || 1200\n    }, c = typeof i.width == \"string\" ? parseInt(i.width) : i.width, y = typeof i.height == \"string\" ? parseInt(i.height) : i.height;\n    typeof y == \"number\" && typeof c == \"number\" && (y = 1200 / c * y), c = 1200;\n    let p = h({\n        ...i,\n        format: d.format || \"jpg\"\n    }), g = h({\n        ...i,\n        format: d.format || \"webp\"\n    }), n = {\n        \"og:image\": \"og-image\",\n        \"og:image:secure_url\": \"og-image-secureurl\",\n        \"og:image:width\": \"og-image-width\",\n        \"og:image:height\": \"og-image-height\",\n        \"og:image:alt\": \"og-image-alt\",\n        \"twitter:title\": \"twitter-title\",\n        \"twitter:card\": \"twitter-card\",\n        \"twitter:image\": \"twitter-image\",\n        ...s\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"og:image\"],\n        property: \"og:image\",\n        content: p\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"og:image:secure_url\"],\n        property: \"og:image:secure_url\",\n        content: p\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"og:image:width\"],\n        property: \"og:image:width\",\n        content: `${c}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"og:image:height\"],\n        property: \"og:image:height\",\n        content: `${y}`\n    }), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"og:image:alt\"],\n        property: \"og:image:alt\",\n        content: e\n    }), !t.includes(\"twitter:title\") && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"twitter:title\"],\n        property: \"twitter:title\",\n        content: o || \" \"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"twitter:card\"],\n        property: \"twitter:card\",\n        content: be\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"meta\", {\n        key: n[\"twitter:image\"],\n        property: \"twitter:image\",\n        content: g\n    }));\n}, se = Le;\n\n\n\nfunction ce(t) {\n    return window && \"requestIdleCallback\" in window ? requestIdleCallback(t) : setTimeout(()=>t(), 1);\n}\nvar Ae = [\n    \"success\",\n    \"display-changed\"\n], ve = {\n    abort: \"onAbort\",\n    \"batch-cancelled\": \"onBatchCancelled\",\n    \"display-changed\": \"onDisplayChanged\",\n    publicid: \"onPublicId\",\n    \"queues-end\": \"onQueuesEnd\",\n    \"queues-start\": \"onQueuesStart\",\n    retry: \"onRetry\",\n    \"show-completed\": \"onShowCompleted\",\n    \"source-changed\": \"onSourceChanged\",\n    success: \"onSuccess\",\n    tags: \"onTags\",\n    \"upload-added\": \"onUploadAdded\"\n}, Ne = ({ children: t, onClose: o, onError: s, onOpen: d, onUpload: e, options: i, signatureEndpoint: c, uploadPreset: y, ...p })=>{\n    let g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), _ = !!c, [E, P] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [r, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [b, I] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), U = {\n        cloudName: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n        uploadPreset: y || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n        apiKey: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n        ...i\n    };\n    _ && (U.uploadSignature = L, U.apiKey || console.warn(\"Missing dependency: Signed Upload requires an API key\")), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof r == \"undefined\") return;\n        let a = r.event === \"success\", C = r.event === \"display-changed\" && r.info === \"hidden\";\n        a && typeof e == \"function\" && e(r, n.current), C && typeof o == \"function\" && o(n.current);\n    }, [\n        r\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        E && typeof s == \"function\" && s(E, n.current);\n    }, [\n        E\n    ]);\n    function N() {\n        I(!1), g.current || (g.current = window.cloudinary), ce(()=>{\n            n.current || (n.current = K());\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            var a;\n            (a = n.current) == null || a.destroy(), n.current = void 0;\n        }, []);\n    function L(a, C) {\n        if (typeof c == \"undefined\") throw Error(\"Failed to generate signature: signatureEndpoint undefined.\");\n        fetch(c, {\n            method: \"POST\",\n            body: JSON.stringify({\n                paramsToSign: C\n            })\n        }).then((u)=>u.json()).then(({ signature: u })=>{\n            a(u);\n        });\n    }\n    function f(a, C = []) {\n        if (n.current || (n.current = K()), typeof (n == null ? void 0 : n.current[a]) == \"function\") return n.current[a](...C);\n    }\n    function S(a) {\n        f(\"close\", [\n            a\n        ]);\n    }\n    function D(a) {\n        return f(\"destroy\", [\n            a\n        ]);\n    }\n    function W() {\n        f(\"hide\");\n    }\n    function w() {\n        return f(\"isDestroyed\");\n    }\n    function T() {\n        return f(\"isMinimized\");\n    }\n    function z() {\n        return f(\"isShowing\");\n    }\n    function k() {\n        f(\"minimize\");\n    }\n    function q(a, C) {\n        f(\"open\", [\n            a,\n            C\n        ]), typeof d == \"function\" && d(n.current);\n    }\n    function M() {\n        f(\"show\");\n    }\n    function A() {\n        f(\"update\");\n    }\n    let G = {\n        close: S,\n        destroy: D,\n        hide: W,\n        isDestroyed: w,\n        isMinimized: T,\n        isShowing: z,\n        minimize: k,\n        open: q,\n        show: M,\n        update: A\n    };\n    function K() {\n        var a;\n        return (a = g.current) == null ? void 0 : a.createUploadWidget(U, (C, u)=>{\n            if (typeof C == \"string\" && P(C), typeof (u == null ? void 0 : u.event) == \"string\") {\n                Ae.includes(u == null ? void 0 : u.event) && m(u);\n                let V = ve[u.event];\n                if (typeof V == \"string\" && typeof p[V] == \"function\" && typeof p[V]) {\n                    let l = p[V];\n                    l(u, {\n                        widget: n.current,\n                        ...G\n                    });\n                }\n            }\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, typeof t == \"function\" && t({\n        cloudinary: g.current,\n        widget: n.current,\n        results: r,\n        error: E,\n        isLoading: b,\n        ...G\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__, {\n        id: `cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`,\n        src: \"https://upload-widget.cloudinary.com/global/all.js\",\n        onLoad: N,\n        onError: (a)=>console.error(`Failed to load Cloudinary Upload Widget: ${a.message}`)\n    }));\n}, B = Ne;\nvar We = ({ className: t, children: o, onClick: s, onError: d, onOpen: e, onUpload: i, onAbort: c, onBatchCancelled: y, onClose: p, onDisplayChanged: g, onPublicId: n, onQueuesEnd: _, onQueuesStart: E, onRetry: P, onShowCompleted: r, onSourceChanged: m, onSuccess: b, onTags: I, onUploadAdded: U, options: N, signatureEndpoint: L, uploadPreset: f, ...S })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(B, {\n        onError: d,\n        onOpen: e,\n        onUpload: i,\n        onAbort: c,\n        onBatchCancelled: y,\n        onClose: p,\n        onDisplayChanged: g,\n        onPublicId: n,\n        onQueuesEnd: _,\n        onQueuesStart: E,\n        onRetry: P,\n        onShowCompleted: r,\n        onSourceChanged: m,\n        onSuccess: b,\n        onTags: I,\n        onUploadAdded: U,\n        options: N,\n        signatureEndpoint: L,\n        uploadPreset: f\n    }, ({ open: D, isLoading: W })=>{\n        function w(T) {\n            T.preventDefault(), D(), typeof s == \"function\" && s(T);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            ...S,\n            className: t || \"\",\n            onClick: w,\n            disabled: W\n        }, o || \"Upload\");\n    })), ge = We;\n\n\n\n\n\nfunction re(t, o, s) {\n    var e, i;\n    let d = (i = (e = o == null ? void 0 : o.cloud) == null ? void 0 : e.cloudName) != null ? i : process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;\n    return (0,_cloudinary_util_url_loader__WEBPACK_IMPORTED_MODULE_3__.constructCloudinaryUrl)({\n        options: {\n            assetType: \"video\",\n            ...t\n        },\n        config: Object.assign({\n            cloud: {\n                cloudName: d\n            }\n        }, o),\n        analytics: Object.assign({\n            sdkCode: H,\n            sdkSemver: $,\n            techVersion: X,\n            feature: \"\"\n        }, s)\n    });\n}\nvar F = [], me = \"1.10.1\", ke = (t)=>{\n    let { autoPlay: o = \"never\", className: s, colors: d, controls: e = !0, fontFace: i, height: c, id: y, logo: p = !0, loop: g = !1, muted: n = !1, onDataLoad: _, onError: E, onMetadataLoad: P, onPause: r, onPlay: m, onEnded: b, poster: I, src: U, sourceTypes: N, transformation: L, quality: f = \"auto\", width: S, ...D } = t, W = Array.isArray(L) ? L : [\n        L\n    ], w = U || \"\";\n    if (w.startsWith(\"http\")) try {\n        let l = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_4__.parseUrl)(U);\n        typeof (l == null ? void 0 : l.publicId) == \"string\" && (w = l == null ? void 0 : l.publicId);\n    } catch (l) {}\n    W.unshift({\n        quality: f\n    });\n    let T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), k = t.videoRef || z, q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), M = t.playerRef || q, A = y || `player-${w.replace(\"/\", \"-\")}`, G = \"cld-video-player cld-fluid\";\n    s && (G = `${G} ${s}`), F.filter((l)=>l === A).length > 1 ? console.warn(`Multiple instances of the same video detected on the\n     page which may cause some features to not work. \n    Try adding a unique id to each player.`) : F.push(A);\n    let a = {\n        error: E,\n        loadeddata: _,\n        loadedmetadata: P,\n        pause: r,\n        play: m,\n        ended: b\n    };\n    function C(l) {\n        let O = a[l.type];\n        typeof O == \"function\" && O(V());\n    }\n    function u() {\n        if (\"cloudinary\" in window) {\n            T.current = window.cloudinary;\n            let l = {};\n            typeof p == \"boolean\" ? l.showLogo = p : typeof p == \"object\" && (l = {\n                ...l,\n                showLogo: !0,\n                logoImageUrl: p.imageUrl,\n                logoOnclickUrl: p.onClickUrl\n            });\n            let O = {\n                autoplayMode: o,\n                cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n                controls: e,\n                fontFace: i || \"\",\n                loop: g,\n                muted: n,\n                publicId: w,\n                transformation: W,\n                ...l,\n                ...D\n            };\n            Array.isArray(N) && (O.sourceTypes = N), typeof d == \"object\" && (O.colors = d), typeof I == \"string\" ? O.posterOptions = {\n                publicId: I\n            } : typeof I == \"object\" && (typeof I.src != \"string\" ? O.posterOptions = {\n                publicId: re({\n                    ...I,\n                    src: w,\n                    format: \"auto:image\"\n                })\n            } : O.posterOptions = {\n                publicId: h(I)\n            }), M.current = T.current.videoPlayer(k.current, O), Object.keys(a).forEach((ie)=>{\n                var de;\n                typeof a[ie] == \"function\" && ((de = M.current) == null || de.on(ie, C));\n            });\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{\n            var l;\n            (l = M.current) == null || l.videojs.cloudinary.dispose(), F = F.filter((O)=>O !== A);\n        }, []);\n    function V() {\n        return {\n            player: M.current,\n            video: k.current\n        };\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_head__WEBPACK_IMPORTED_MODULE_5__, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"link\", {\n        href: `https://unpkg.com/cloudinary-video-player@${me}/dist/cld-video-player.min.css`,\n        rel: \"stylesheet\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            aspectRatio: `${t.width} / ${t.height}`\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: k,\n        id: A,\n        className: G,\n        width: S,\n        height: c\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(next_script__WEBPACK_IMPORTED_MODULE_6__, {\n        id: `cloudinary-videoplayer-${A}-${Math.floor(Math.random() * 100)}`,\n        src: `https://unpkg.com/cloudinary-video-player@${me}/dist/cld-video-player.min.js`,\n        onLoad: u,\n        onError: (l)=>console.error(`Failed to load Cloudinary Video Player: ${l.message}`)\n    })));\n}, ue = ke;\nfunction je(t) {\n    return h({\n        ...t,\n        crop: t.crop || \"fill\",\n        format: t.format || \"jpg\",\n        gravity: t.gravity || \"center\",\n        height: t.height || 1254,\n        width: t.width || 2400,\n        widthResize: t.width || 1200\n    });\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-cloudinary/dist/index.mjs\n");

/***/ })

};
;